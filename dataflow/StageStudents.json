{
	"name": "StageStudents",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "StageDailyData"
				},
				{
					"dataset": {
						"referenceName": "DailyDataTable",
						"type": "DatasetReference"
					},
					"name": "DailyData"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwModes"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwStudents"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "StageStudents"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "StageCourses"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "StageGrades"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwModesSink"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "AddingAuditColumnsStudents"
				},
				{
					"name": "StudentsInfoJoin"
				},
				{
					"name": "FetchingRequiredColumns"
				},
				{
					"name": "courses"
				},
				{
					"name": "AddingAuditColumnsCourses"
				},
				{
					"name": "grades"
				},
				{
					"name": "AddingAuditColumnsGrades"
				},
				{
					"name": "Modes"
				},
				{
					"name": "AddingAuditCoulumns"
				},
				{
					"name": "RemovingDuplicateModes"
				},
				{
					"name": "RemovingDuplicateGrades"
				},
				{
					"name": "CheckingForRecords"
				},
				{
					"name": "Inserts"
				},
				{
					"name": "StudentsCheck"
				},
				{
					"name": "StudentsSplit"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     InsertedBy as string,",
				"     ModifiedBy as string",
				"}",
				"source(output(",
				"          id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          gender as string,",
				"          ip_address as string,",
				"          LastModifiedTime as string,",
				"          LastModifiedBy as string,",
				"          LastRunId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'stage',",
				"     tableName: 'STUDENTS',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> StageDailyData",
				"source(output(",
				"          student_id as long,",
				"          nationality as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          postal_code as string,",
				"          phone_number as string,",
				"          parent_name as string,",
				"          parent_email as string,",
				"          parent_phone as string,",
				"          grade_level as string,",
				"          gpa as double,",
				"          attendance_percentage as double,",
				"          homework_completed as double,",
				"          test_scores as double,",
				"          class_rank as long,",
				"          teacher_name as string,",
				"          course_name as string,",
				"          course_grade as string,",
				"          course_start_date as string,",
				"          course_end_date as string,",
				"          course_duration as long,",
				"          course_teacher_feedback as string,",
				"          course_student_feedback as string,",
				"          course_materials as string,",
				"          course_attendance as boolean,",
				"          course_grade_weightage as double,",
				"          course_passing_grade as double,",
				"          course_completion_status as boolean,",
				"          LastModified as string,",
				"          LastModifiedBy as string,",
				"          LastRunId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DailyData",
				"source(output(",
				"          MODEID as integer,",
				"          MODENAME as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'MODES',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> EdwModes",
				"source(output(",
				"          STUDENTKEY as integer,",
				"          STUDENTID as integer,",
				"          FNAME as string,",
				"          LNAME as string,",
				"          EMAIL as string,",
				"          GENDER as string,",
				"          ADDRESS as string,",
				"          STATE as string,",
				"          CITY as string,",
				"          PHONENUMBER as string,",
				"          POSTALCODE as string,",
				"          HASHCOLUMN as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'STUDENTS',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> EdwStudents",
				"FetchingRequiredColumns derive(InsertedBy = $InsertedBy,",
				"          ModifiedBy = $ModifiedBy,",
				"          InsertedTime = currentTimestamp(),",
				"          ModifiedTime = ERROR_FUNCTION(''),",
				"          HashColumn = md5(email+address+city+state+postal_code+phone_number)) ~> AddingAuditColumnsStudents",
				"StageDailyData, DailyData join(id == toString(student_id),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> StudentsInfoJoin",
				"StudentsInfoJoin select(mapColumn(",
				"          id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          gender,",
				"          address,",
				"          city,",
				"          state,",
				"          postal_code,",
				"          phone_number",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FetchingRequiredColumns",
				"DailyData select(mapColumn(",
				"          coursename = course_name,",
				"          coursegrade = course_grade",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> courses",
				"courses derive(insertedby = $InsertedBy,",
				"          modifiedby = $ModifiedBy,",
				"          insertedtime = currentTimestamp(),",
				"          modifiedtime = currentTimestamp()) ~> AddingAuditColumnsCourses",
				"DailyData select(mapColumn(",
				"          grade_level",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> grades",
				"RemovingDuplicateGrades derive(InsertedBy = $InsertedBy,",
				"          ModifiedBy = $ModifiedBy,",
				"          InsertedTime = currentTimestamp(),",
				"          ModifiedTime = currentTimestamp()) ~> AddingAuditColumnsGrades",
				"DailyData select(mapColumn(",
				"          course_materials",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Modes",
				"RemovingDuplicateModes derive(InsertedBy = $InsertedBy,",
				"          ModifiedBy = $ModifiedBy,",
				"          InsertedTime = currentTimestamp(),",
				"          ModifiedTime = currentTimestamp()) ~> AddingAuditCoulumns",
				"Modes aggregate(groupBy(course_materials),",
				"     count = count()) ~> RemovingDuplicateModes",
				"grades aggregate(groupBy(grade_level),",
				"     count = count()) ~> RemovingDuplicateGrades",
				"AddingAuditCoulumns, EdwModes lookup(course_materials == MODENAME,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CheckingForRecords",
				"CheckingForRecords split(isNull(MODEID),",
				"     disjoint: false) ~> Inserts@(EdwModesSink, Default)",
				"AddingAuditColumnsStudents, EdwStudents lookup(id == toString(STUDENTID),",
				"     multiple: false,",
				"     pickup: 'last',",
				"     asc(EdwStudents@MODIFIEDTIME, true),",
				"     broadcast: 'auto')~> StudentsCheck",
				"StudentsCheck split(isNull(STUDENTID),",
				"     !equals(AddingAuditColumnsStudents@HashColumn, EdwStudents@HASHCOLUMN),",
				"     disjoint: false) ~> StudentsSplit@(Insert, UpdateIf, Update)",
				"StudentsSplit@UpdateIf alterRow(updateIf(1==1)) ~> alterRow1",
				"alterRow1 derive(MODIFIEDTIME = currentTimestamp()) ~> derivedColumn1",
				"StudentsSplit@Insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STUDENTID as integer,",
				"          FNAME as string,",
				"          LNAME as string,",
				"          EMAIL as string,",
				"          GENDER as string,",
				"          ADDRESS as string,",
				"          STATE as string,",
				"          CITY as string,",
				"          PHONENUMBER as string,",
				"          POSTALCODE as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'stage',",
				"     tableName: 'STUDENTS',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          STUDENTID = id,",
				"          FNAME = first_name,",
				"          LNAME = last_name,",
				"          EMAIL = email,",
				"          GENDER = gender,",
				"          ADDRESS = address,",
				"          STATE = state,",
				"          CITY = city,",
				"          PHONENUMBER = phone_number,",
				"          POSTALCODE = postal_code,",
				"          INSERTEDBY = InsertedBy,",
				"          MODIFIEDBY = ModifiedBy,",
				"          INSERTEDTIME = InsertedTime,",
				"          MODIFIEDTIME = ModifiedTime",
				"     )) ~> StageStudents",
				"AddingAuditColumnsCourses sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COURSEID as integer,",
				"          COURSENAME as string,",
				"          COURSEGRADE as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'stage',",
				"     tableName: 'COURSES',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          COURSENAME = coursename,",
				"          COURSEGRADE = coursegrade,",
				"          INSERTEDBY = insertedby,",
				"          MODIFIEDBY = modifiedby,",
				"          INSERTEDTIME = insertedtime,",
				"          MODIFIEDTIME = modifiedtime",
				"     )) ~> StageCourses",
				"AddingAuditColumnsGrades sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'GRADES',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          grade_level,",
				"          InsertedBy,",
				"          ModifiedBy,",
				"          InsertedTime,",
				"          ModifiedTime",
				"     )) ~> StageGrades",
				"Inserts@EdwModesSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MODEID as integer,",
				"          MODENAME as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'MODES',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MODENAME = course_materials,",
				"          INSERTEDBY = Inserts@EdwModesSink@InsertedBy,",
				"          MODIFIEDBY = Inserts@EdwModesSink@ModifiedBy,",
				"          INSERTEDTIME = Inserts@EdwModesSink@InsertedTime,",
				"          MODIFIEDTIME = Inserts@EdwModesSink@ModifiedTime",
				"     )) ~> EdwModesSink",
				"Inserts@Default sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'MODES',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}