{
	"name": "LoadingDimensions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "StageDailyData"
				},
				{
					"dataset": {
						"referenceName": "DailyDataTable",
						"type": "DatasetReference"
					},
					"name": "DailyData"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwModes"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwStudents"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwGrades"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwCourses"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwStudentsSink"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwCoursesSink"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwGradesSink"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "EdwModesSink"
				},
				{
					"linkedService": {
						"referenceName": "Sql server",
						"type": "LinkedServiceReference"
					},
					"name": "UpdateEdwStudentsSink"
				}
			],
			"transformations": [
				{
					"name": "AddingAuditColumnsStudents"
				},
				{
					"name": "StudentsInfoJoin"
				},
				{
					"name": "FetchingRequiredColumns"
				},
				{
					"name": "courses"
				},
				{
					"name": "AddingAuditColumnsCourses"
				},
				{
					"name": "grades"
				},
				{
					"name": "AddingAuditColumnsGrades"
				},
				{
					"name": "Modes"
				},
				{
					"name": "AddingAuditCoulumns"
				},
				{
					"name": "RemovingDuplicateModes"
				},
				{
					"name": "RemovingDuplicateGrades"
				},
				{
					"name": "CheckingForRecords"
				},
				{
					"name": "Inserts"
				},
				{
					"name": "StudentsCheck"
				},
				{
					"name": "StudentsSplit"
				},
				{
					"name": "CheckingForGrades"
				},
				{
					"name": "GradesSplit"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "CheckingForCourses"
				},
				{
					"name": "CoursesSplit"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "Insertime"
				}
			],
			"scriptLines": [
				"parameters{",
				"     InsertedBy as string,",
				"     ModifiedBy as string,",
				"     InsertedTime as timestamp (currentTimestamp())",
				"}",
				"source(output(",
				"          id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          gender as string,",
				"          ip_address as string,",
				"          LastModifiedTime as string,",
				"          LastModifiedBy as string,",
				"          LastRunId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'stage',",
				"     tableName: 'STUDENTS',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> StageDailyData",
				"source(output(",
				"          student_id as long,",
				"          nationality as string,",
				"          address as string,",
				"          city as string,",
				"          state as string,",
				"          postal_code as string,",
				"          phone_number as string,",
				"          parent_name as string,",
				"          parent_email as string,",
				"          parent_phone as string,",
				"          grade_level as string,",
				"          gpa as double,",
				"          attendance_percentage as double,",
				"          homework_completed as double,",
				"          test_scores as double,",
				"          class_rank as long,",
				"          teacher_name as string,",
				"          course_name as string,",
				"          course_grade as string,",
				"          course_start_date as string,",
				"          course_end_date as string,",
				"          course_duration as long,",
				"          course_teacher_feedback as string,",
				"          course_student_feedback as string,",
				"          course_materials as string,",
				"          course_attendance as boolean,",
				"          course_grade_weightage as double,",
				"          course_passing_grade as double,",
				"          course_completion_status as boolean,",
				"          LastModified as string,",
				"          LastModifiedBy as string,",
				"          LastRunId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DailyData",
				"source(output(",
				"          MODEID as integer,",
				"          MODENAME as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'MODES',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> EdwModes",
				"source(output(",
				"          STUDENTKEY as integer,",
				"          STUDENTID as integer,",
				"          FNAME as string,",
				"          LNAME as string,",
				"          EMAIL as string,",
				"          GENDER as string,",
				"          ADDRESS as string,",
				"          STATE as string,",
				"          CITY as string,",
				"          PHONENUMBER as string,",
				"          POSTALCODE as string,",
				"          HASHCOLUMN as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select * from edw.Students where MODIFIEDTIME is null',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> EdwStudents",
				"source(output(",
				"          GRADEID as integer,",
				"          GRADENAME as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'GRADES',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> EdwGrades",
				"source(output(",
				"          COURSEID as integer,",
				"          COURSENAME as string,",
				"          COURSEGRADE as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'COURSES',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> EdwCourses",
				"FetchingRequiredColumns derive(InsertedBy = $InsertedBy,",
				"          ModifiedBy = $ModifiedBy,",
				"          InsertedTime = currentTimestamp(),",
				"          HashColumn = md5(email,address,postal_code,phone_number)) ~> AddingAuditColumnsStudents",
				"StageDailyData, DailyData join(id == toString(student_id),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> StudentsInfoJoin",
				"StudentsInfoJoin select(mapColumn(",
				"          id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          gender,",
				"          address,",
				"          city,",
				"          state,",
				"          postal_code,",
				"          phone_number",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FetchingRequiredColumns",
				"DailyData select(mapColumn(",
				"          coursename = course_name,",
				"          coursegrade = course_grade",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> courses",
				"aggregate1 derive(insertedby = $InsertedBy,",
				"          modifiedby = $ModifiedBy,",
				"          insertedtime = currentTimestamp(),",
				"          modifiedtime = currentTimestamp()) ~> AddingAuditColumnsCourses",
				"DailyData select(mapColumn(",
				"          grade_level",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> grades",
				"RemovingDuplicateGrades derive(InsertedBy = $InsertedBy,",
				"          ModifiedBy = $ModifiedBy,",
				"          InsertedTime = currentTimestamp(),",
				"          ModifiedTime = currentTimestamp()) ~> AddingAuditColumnsGrades",
				"DailyData select(mapColumn(",
				"          course_materials",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Modes",
				"RemovingDuplicateModes derive(InsertedBy = $InsertedBy,",
				"          ModifiedBy = $ModifiedBy,",
				"          InsertedTime = currentTimestamp(),",
				"          ModifiedTime = currentTimestamp()) ~> AddingAuditCoulumns",
				"Modes aggregate(groupBy(course_materials),",
				"     count = count()) ~> RemovingDuplicateModes",
				"grades aggregate(groupBy(grade_level),",
				"     count = count()) ~> RemovingDuplicateGrades",
				"AddingAuditCoulumns, EdwModes lookup(course_materials == MODENAME,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CheckingForRecords",
				"CheckingForRecords split(isNull(MODEID),",
				"     disjoint: false) ~> Inserts@(EdwModesSink, Default)",
				"AddingAuditColumnsStudents, EdwStudents lookup(toInteger(id) == STUDENTID,",
				"     multiple: false,",
				"     pickup: 'last',",
				"     asc(EdwStudents@MODIFIEDTIME, false),",
				"     broadcast: 'auto')~> StudentsCheck",
				"StudentsCheck split(isNull(STUDENTID) || (equals(id,toString(STUDENTID)) && AddingAuditColumnsStudents@HashColumn!=EdwStudents@HASHCOLUMN),",
				"     (toInteger(id)==STUDENTID) && !equals(AddingAuditColumnsStudents@HashColumn, EdwStudents@HASHCOLUMN),",
				"     disjoint: true) ~> StudentsSplit@(Insert, UpdateIf)",
				"AddingAuditColumnsGrades, EdwGrades lookup(grade_level == GRADENAME,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CheckingForGrades",
				"CheckingForGrades split(isNull(GRADEID),",
				"     disjoint: false) ~> GradesSplit@(insertGrade, Nochange)",
				"courses aggregate(groupBy(coursename,",
				"          coursegrade),",
				"     count = count()) ~> aggregate1",
				"AddingAuditColumnsCourses, EdwCourses lookup(aggregate1@coursename == EdwCourses@COURSENAME",
				"     && aggregate1@coursegrade == EdwCourses@COURSEGRADE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CheckingForCourses",
				"CheckingForCourses split(isNull(COURSEID),",
				"     disjoint: false) ~> CoursesSplit@(insert, default)",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
				"StudentsSplit@UpdateIf derive(MODIFIEDTIME = $InsertedTime) ~> derivedColumn1",
				"StudentsSplit@Insert derive(InsertedTime = $InsertedTime) ~> Insertime",
				"Insertime sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STUDENTKEY as integer,",
				"          STUDENTID as integer,",
				"          FNAME as string,",
				"          LNAME as string,",
				"          EMAIL as string,",
				"          GENDER as string,",
				"          ADDRESS as string,",
				"          STATE as string,",
				"          CITY as string,",
				"          PHONENUMBER as string,",
				"          POSTALCODE as string,",
				"          HASHCOLUMN as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'STUDENTS',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          STUDENTID = id,",
				"          FNAME = first_name,",
				"          LNAME = last_name,",
				"          EMAIL = StudentsSplit@Insert@email,",
				"          GENDER = StudentsSplit@Insert@gender,",
				"          ADDRESS = StudentsSplit@Insert@address,",
				"          STATE = StudentsSplit@Insert@state,",
				"          CITY = StudentsSplit@Insert@city,",
				"          PHONENUMBER = phone_number,",
				"          POSTALCODE = postal_code,",
				"          HASHCOLUMN = StudentsSplit@Insert@HashColumn,",
				"          INSERTEDBY = StudentsSplit@Insert@InsertedBy,",
				"          MODIFIEDBY = StudentsSplit@Insert@ModifiedBy,",
				"          INSERTEDTIME = Insertime@InsertedTime",
				"     )) ~> EdwStudentsSink",
				"CoursesSplit@insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COURSEID as integer,",
				"          COURSENAME as string,",
				"          COURSEGRADE as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'COURSES',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 5,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          COURSENAME = coursename,",
				"          COURSEGRADE = coursegrade,",
				"          INSERTEDBY = insertedby,",
				"          MODIFIEDBY = modifiedby,",
				"          INSERTEDTIME = insertedtime",
				"     )) ~> EdwCoursesSink",
				"GradesSplit@insertGrade sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          GRADEID as integer,",
				"          GRADENAME as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'GRADES',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 4,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          GRADENAME = grade_level,",
				"          INSERTEDBY = GradesSplit@insertGrade@InsertedBy,",
				"          MODIFIEDBY = GradesSplit@insertGrade@ModifiedBy,",
				"          INSERTEDTIME = GradesSplit@insertGrade@InsertedTime",
				"     )) ~> EdwGradesSink",
				"Inserts@EdwModesSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MODEID as integer,",
				"          MODENAME as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'MODES',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MODENAME = course_materials,",
				"          INSERTEDBY = Inserts@EdwModesSink@InsertedBy,",
				"          MODIFIEDBY = Inserts@EdwModesSink@ModifiedBy,",
				"          INSERTEDTIME = Inserts@EdwModesSink@InsertedTime",
				"     )) ~> EdwModesSink",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STUDENTKEY as integer,",
				"          STUDENTID as integer,",
				"          FNAME as string,",
				"          LNAME as string,",
				"          EMAIL as string,",
				"          GENDER as string,",
				"          ADDRESS as string,",
				"          STATE as string,",
				"          CITY as string,",
				"          PHONENUMBER as string,",
				"          POSTALCODE as string,",
				"          HASHCOLUMN as string,",
				"          INSERTEDBY as string,",
				"          MODIFIEDBY as string,",
				"          INSERTEDTIME as timestamp,",
				"          MODIFIEDTIME as timestamp",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'edw',",
				"     tableName: 'STUDENTS',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['STUDENTKEY'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MODIFIEDTIME,",
				"          STUDENTKEY",
				"     )) ~> UpdateEdwStudentsSink"
			]
		}
	}
}